{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","className","args","theme","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","type","innerText","console","log","head","appendChild","addCustomCSS","enable_enterprise_modules","ModuleRegistry","registerModules","AllModules","LicenseManager","setLicenseKey","AllCommunityModules","frame_dtypes","update_mode","allow_unsafe_jscode","fit_columns_on_grid_load","columnTypes","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","valueFormatter","params","dateFormatter","value","column","colDef","custom_format_string","numberFormatter","precision","currencyFormatter","custom_currency_symbol","duration","humanize","assign","warn","JSON","parse","row_data","gridHeight","height","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","this","updateMode","addEventListener","event","idx","setUpdateMode","fitColumns","selectIndex","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","returnData","data_return_mode","forEachLeafNode","row","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","returnValue","originalDtypes","selectedRows","getSelectedRows","Streamlit","setComponentValue","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33a4c177.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\r\nfunction mapObject(obj, fn) {\r\n    return Object.keys(obj).reduce((res, key) => {\r\n        res[key] = fn(obj[key])\r\n        return res\r\n    }, {})\r\n}\r\n\r\nfunction deepMap(obj, fn) {\r\n    const deepMapper = (val) =>\r\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(deepMapper)\r\n    }\r\n    if (typeof obj === \"object\") {\r\n        return mapObject(obj, deepMapper)\r\n    }\r\n    return obj\r\n}\r\n\r\nexport default deepMap","import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection\r\n} from \"streamlit-component-lib\";\r\n\r\nimport { ReactNode } from \"react\"\r\n\r\nimport { AgGridReact } from '@ag-grid-community/react';\r\nimport { ColumnApi, GridApi } from '@ag-grid-community/core'\r\nimport { ModuleRegistry } from '@ag-grid-community/core';\r\nimport { AllCommunityModules } from '@ag-grid-community/all-modules'\r\nimport { AllModules } from '@ag-grid-enterprise/all-modules'\r\nimport { LicenseManager } from \"@ag-grid-enterprise/core\";\r\n\r\nimport { parseISO, compareAsc } from 'date-fns'\r\nimport { format } from 'date-fns-tz'\r\nimport deepMap from \"./utils\"\r\nimport { duration } from \"moment\";\r\n\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-blue.css';\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-fresh.css';\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-material.css';\r\n\r\nimport './AgGrid.scss'\r\nimport './scrollbar.css'\r\n\r\ninterface State {\r\n  rowData: any\r\n  gridHeight: number\r\n  should_update: boolean\r\n}\r\n\r\ntype CSSDict = {[key: string]: {[key: string]: string}}\r\n\r\nfunction getCSS(styles: CSSDict): string {\r\n  var css = [];\r\n  for (let selector in styles) {\r\n    let style = selector + \" {\";\r\n\r\n    for (let prop in styles[selector]) {\r\n      style += prop + \": \" + styles[selector][prop] + \";\";\r\n    }\r\n\r\n    style += \"}\";\r\n\r\n    css.push(style);\r\n  }\r\n\r\n  return css.join(\"\\n\");\r\n}\r\n\r\nfunction addCustomCSS(custom_css: CSSDict): void {\r\n    var css = getCSS(custom_css)\r\n    var styleSheet = document.createElement(\"style\")\r\n    styleSheet.type = \"text/css\"\r\n    styleSheet.innerText = css\r\n    console.log(`Adding cutom css: `, css)\r\n    document.head.appendChild(styleSheet)\r\n}\r\n\r\nclass AgGrid extends StreamlitComponentBase<State> {\r\n  private frameDtypes: any\r\n  private api!: GridApi;\r\n  private columnApi!: ColumnApi\r\n  private columnFormaters: any\r\n  private manualUpdateRequested: boolean = false\r\n  private allowUnsafeJsCode: boolean = false\r\n  private fitColumnsOnGridLoad: boolean = false\r\n  private gridOptions: any\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    if (props.args.custom_css) {\r\n      addCustomCSS(props.args.custom_css);\r\n    }\r\n\r\n    if (props.args.enable_enterprise_modules) {\r\n      ModuleRegistry.registerModules(AllModules);\r\n      if ('license_key' in props.args) {\r\n        LicenseManager.setLicenseKey(props.args['license_key']);\r\n      }\r\n    } else {\r\n      ModuleRegistry.registerModules(AllCommunityModules);\r\n    }\r\n\r\n    this.frameDtypes = this.props.args.frame_dtypes\r\n    this.manualUpdateRequested = (this.props.args.update_mode === 1)\r\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\r\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\r\n\r\n    this.columnFormaters = {\r\n      columnTypes: {\r\n        'dateColumnFilter': {\r\n          filter: 'agDateColumnFilter',\r\n          filterParams: {\r\n            comparator: (filterValue: any, cellValue: string) => compareAsc(parseISO(cellValue), filterValue)\r\n          }\r\n        },\r\n        'numberColumnFilter': {\r\n          filter: 'agNumberColumnFilter'\r\n        },\r\n        'shortDateTimeFormat': {\r\n          valueFormatter: (params: any) => this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n        },\r\n        'customDateTimeFormat': {\r\n          valueFormatter: (params: any) => this.dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n        },\r\n        'customNumericFormat': {\r\n          valueFormatter: (params: any) => this.numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n        },\r\n        'customCurrencyFormat': {\r\n          valueFormatter: (params: any) => this.currencyFormatter(params.value, params.column.colDef.custom_currency_symbol),\r\n        },\r\n        'timedeltaFormat': {\r\n          valueFormatter: (params: any) => duration(params.value).humanize(true)\r\n        },\r\n      }\r\n    }\r\n\r\n    let gridOptions = Object.assign({}, this.columnFormaters, this.props.args.gridOptions)\r\n\r\n    if (this.allowUnsafeJsCode) {\r\n      console.warn(\"flag allow_unsafe_jscode is on.\")\r\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\r\n    }\r\n    this.gridOptions = gridOptions\r\n\r\n    this.state = {\r\n      rowData: JSON.parse(props.args.row_data),\r\n      gridHeight: this.props.args.height,\r\n      should_update: false\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: any, state: any) {\r\n    if (props.args.reload_data) {\r\n\r\n      let new_row_data = JSON.parse(props.args.row_data)\r\n\r\n      return {\r\n        rowData: new_row_data,\r\n        gridHeight: props.args.height,\r\n        should_update: true\r\n      }\r\n    } else {\r\n      return {\r\n        gridHeight: props.args.height\r\n      }\r\n    }\r\n  }\r\n\r\n  private convertStringToFunction(v: string) {\r\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*(function\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n\r\n    let match = funcReg.exec(v)\r\n\r\n    if (match) {\r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\r\n    return deepMap(obj, this.convertStringToFunction)\r\n  }\r\n\r\n  private setUpdateMode() {\r\n    if (this.manualUpdateRequested) {\r\n      return //If manual update is set, no listeners will be added\r\n    }\r\n\r\n    let updateMode = this.props.args.update_mode\r\n\r\n    if ((updateMode & 2) === 2) {\r\n      this.api.addEventListener('cellValueChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n\r\n    if ((updateMode & 4) === 4) {\r\n      this.api.addEventListener('selectionChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n\r\n    if ((updateMode & 8) === 8) {\r\n      this.api.addEventListener('filterChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n\r\n    if ((updateMode & 16) === 16) {\r\n      this.api.addEventListener('sortChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n  }\r\n\r\n  private onGridReady(event: any) {\r\n    this.api = event.api\r\n    this.columnApi = event.columnApi\r\n\r\n    this.setUpdateMode()\r\n    this.api.addEventListener('firstDataRendered', (e: any) => this.fitColumns())\r\n\r\n    this.api.setRowData(this.state.rowData)\r\n\r\n    for (var idx in this.gridOptions['preSelectedRows']) {\r\n      this.api.selectIndex(this.gridOptions['preSelectedRows'][idx], true, true)\r\n    }\r\n  }\r\n\r\n  private fitColumns() {\r\n    if (this.fitColumnsOnGridLoad) {\r\n      this.api.sizeColumnsToFit()\r\n    }\r\n    else {\r\n      this.columnApi.autoSizeAllColumns()\r\n    }\r\n  }\r\n\r\n  private dateFormatter(isoString: string, formaterString: string): String {\r\n    try {\r\n      let date = parseISO(isoString)\r\n      return format(date, formaterString)\r\n    } catch {\r\n      return isoString\r\n    }\r\n    finally { }\r\n  }\r\n\r\n  private currencyFormatter(number: any, currencySymbol: string): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return currencySymbol + n.toFixed(2)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private numberFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return n.toFixed(precision)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private returnGridValue(e: any) {\r\n    let returnData: any[] = []\r\n    let returnMode = this.props.args.data_return_mode\r\n\r\n    switch (returnMode) {\r\n      case 0: //ALL_DATA\r\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\r\n        break;\r\n\r\n      case 1: //FILTERED_DATA\r\n        this.api.forEachNodeAfterFilter((row) => { if (!row.group) { returnData.push(row.data) } })\r\n        break;\r\n\r\n      case 2: //FILTERED_SORTED_DATA\r\n        this.api.forEachNodeAfterFilterAndSort((row) => { if (!row.group) { returnData.push(row.data) } })\r\n        break;\r\n    }\r\n\r\n    let returnValue = {\r\n      originalDtypes: this.frameDtypes,\r\n      rowData: returnData,\r\n      selectedRows: this.api.getSelectedRows()\r\n    }\r\n\r\n    Streamlit.setComponentValue(returnValue)\r\n  }\r\n\r\n  private ManualUpdateButton(props: any) {\r\n    if (props.manual_update) {\r\n      return (<button onClick={props.onClick}>Update</button>)\r\n    }\r\n    else {\r\n      return (<span></span>)\r\n    }\r\n  }\r\n\r\n  private defineContainerHeight() {\r\n    if ('domLayout' in this.gridOptions) {\r\n      if (this.gridOptions['domLayout'] === 'autoHeight') {\r\n        return ({\r\n          width: this.props.width\r\n        })\r\n      }\r\n    }\r\n    return ({\r\n      width: this.props.width,\r\n      height: this.state.gridHeight\r\n    })\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n\r\n    if (this.api !== undefined) {\r\n      if (this.state.should_update) {\r\n        this.api.setRowData(this.state.rowData)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={\"ag-theme-\"+ this.props.args.theme} style={this.defineContainerHeight()} >\r\n        <this.ManualUpdateButton manual_update={this.manualUpdateRequested} onClick={(e: any) => this.returnGridValue(e)} />\r\n        <AgGridReact\r\n          onGridReady={(e) => this.onGridReady(e)}\r\n          gridOptions={this.gridOptions}\r\n        >\r\n        </AgGridReact>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(AgGrid)","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport AgGrid from \"./AgGrid\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AgGrid />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}